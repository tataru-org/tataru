variables:
  DOCKER_TLS_CERTDIR: "/certs" #DO NOT REMOVE! This is required to allow docker to use TLS; this allows docker to find the necessary certs.
  VER: v0.3.0
  IMG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  IMG_VERS: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$VER-$CI_COMMIT_SHORT_SHA
  POSTGRES_VERS: 15.1-bullseye

stages:
  - test
  - build
  - deploy

go1.19:
  stage: test
  image: golang:1.19.5
  script:
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - CGO_ENABLED=0 go test -coverprofile report -json ./... | go-junit-report -parser gojson > report.xml
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml
  only:
    - merge_requests
  tags:
    - go1.19

stable-build:
  stage: build
  image: docker:23.0.0
  services:
    - docker:23.0.0-dind
  script:
    - docker login -u $DEPLOY_ACCESS_TOKEN_USER -p $DEPLOY_ACCESS_TOKEN $CI_REGISTRY
    - docker image build -t $IMG_COMMIT -t $IMG_VERS .
    - docker push $IMG_COMMIT
    - docker push $IMG_VERS
    - docker logout
  tags:
    - dind
  only:
    - stable

stable-deploy:
  stage: deploy
  image: alpine:3.17.1
  script:
    - apk update || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories && apk update)
    - 'command -v ssh-agent >/dev/null || ( apk -U add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$DEPLOY_KEY"
    - ssh-add "$DEPLOY_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker logout"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker login -u $DEPLOY_ACCESS_TOKEN_USER -p $DEPLOY_ACCESS_TOKEN $CI_REGISTRY"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker pull $IMG_COMMIT"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container stop $PROD_CONTAINER_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container rm $PROD_CONTAINER_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker volume create $PROD_DATA_VOLUME_NAME"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker network create --gateway $PROD_NETWORK_GATEWAY --subnet $PROD_NETWORK_SUBNET $PROD_NETWORK_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container create --restart=always --network $PROD_NETWORK_NAME --ip $PROD_DB_CONTAINER_IP --name $PROD_DB_CONTAINER_NAME -v $PROD_DATA_VOLUME_NAME:/var/lib/postgresql/data -e POSTGRES_PASSWORD=$PROD_DB_PW -e POSTGRES_USER=$PROD_DB_USER -e POSTGRES_DB=$PROD_DB_NAME postgres:$POSTGRES_VERS || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container start $PROD_DB_CONTAINER_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container create --restart=always --network $PROD_NETWORK_NAME --ip $PROD_CONTAINER_IP --name $PROD_CONTAINER_NAME -v $PROD_BOT_CONFIG_FILEPATH:/app/config.json -v $PROD_FILE_PERMS_FILEPATH:/app/file-permissions.json -v $PROD_INIT_DB_DATA_DIR:/app/initial-db-data -v $PROD_GOOGLE_API_SVC_CREDS_FILEPATH:/app/svc-creds.json $IMG_COMMIT"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container start $PROD_CONTAINER_NAME"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker logout"
  tags:
    - alpine
  only:
    - stable

dev-build:
  stage: build
  image: docker:23.0.0
  services:
    - docker:23.0.0-dind
  script:
    - docker login -u $DEPLOY_ACCESS_TOKEN_USER -p $DEPLOY_ACCESS_TOKEN $CI_REGISTRY
    - docker image build -t $IMG_COMMIT -t $IMG_VERS .
    - docker push $IMG_COMMIT
    - docker push $IMG_VERS
    - docker logout
  tags:
    - dind
  only:
    - dev

dev-deploy:
  stage: deploy
  image: alpine:3.17.1
  script:
    - apk update || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories && apk update)
    - 'command -v ssh-agent >/dev/null || ( apk -U add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$DEPLOY_KEY"
    - ssh-add "$DEPLOY_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker logout"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker login -u $DEPLOY_ACCESS_TOKEN_USER -p $DEPLOY_ACCESS_TOKEN $CI_REGISTRY"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker pull $IMG_COMMIT"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container rm -f $DEV_CONTAINER_NAME"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker volume create $DEV_DATA_VOLUME_NAME"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker network create --gateway $DEV_NETWORK_GATEWAY --subnet $DEV_NETWORK_SUBNET $DEV_NETWORK_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container create --restart=always --network $DEV_NETWORK_NAME --ip $DEV_DB_CONTAINER_IP --name $DEV_DB_CONTAINER_NAME -v $DEV_DATA_VOLUME_NAME:/var/lib/postgresql/data -e POSTGRES_PASSWORD=$DEV_DB_PW -e POSTGRES_USER=$DEV_DB_USER -e POSTGRES_DB=$DEV_DB_NAME postgres:$POSTGRES_VERS || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container start $DEV_DB_CONTAINER_NAME || true"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container create --restart=always --network $DEV_NETWORK_NAME --ip $DEV_CONTAINER_IP --name $DEV_CONTAINER_NAME -v $DEV_BOT_CONFIG_FILEPATH:/app/config.json -v $DEV_FILE_PERMS_FILEPATH:/app/file-permissions.json -v $DEV_INIT_DB_DATA_DIR:/app/initial-db-data -v $DEV_GOOGLE_API_SVC_CREDS_FILEPATH:/app/svc-creds.json $IMG_COMMIT"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker container start $DEV_CONTAINER_NAME"
    - ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no $DEPLOY_ACCESS_TOKEN_USER@$HOST_IP "docker logout"
  tags:
    - alpine
  only:
    - dev